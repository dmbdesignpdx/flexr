@import "prefix-support";

/* Mixin' with Turntable v0.1.0 -- by Daniel Blake */

// Create fresh stylesheets on the fly using presets, scratching, and sampling.


// Turntable Variables

$prefix: -o-, -ms-, -moz-, -webkit-, null;

// --- RECORDS FOR SCRATCHING (Custom and Prefix Mixins) --- //


// --- i. Vendor-Prefix Mixins --- //

// Display Flex or Grid:

@mixin display($arg) {
   @if $arg == grid {
      @if nth($support,2) < 11 {
         display: -ms-#{$arg};
      }
      display: $arg;
   } @else {
      $old: if($arg == inline-flex, inline-, null );
      @if nth($support,2) < 11 {
         display: -ms-#{$arg}box;
      }
      @if nth($support,1) < 2014 {
         display: -webkit-#{$old}box;
         display: -moz-#{$old}box;
      }
      @if nth($support,1) < 2015 {
         display: -webkit-#{$arg};

      }
      display: $arg;
   }
}


// CSS Grid

// 1. Grid Template Columns

@mixin grid-template-columns($args...) {
   @for $i from 1 through 2 {
      $array: ();
      @each $item in $arg {
         @if length($item) > 1 {
            @if $i == 1 {
               $item: unquote("(#{nth($item,2)})[#{nth($item,1)}]");
            } @else {
               $item: unquote("repeat(#{nth($item,1)}, #{nth($item,2)})");
            }
         }
         $array: append($array, $item, space);
      }
      @if $i == 1 {
         -ms-grid-columns: $array;
      } @else {
         grid-template-columns: $array;
      }
   }
}


// 2. Grid Template Rows

@mixin grid-template-rows($args...) {
   @for $i from 1 through 2 {
      $array: ();
      @each $item in $arg {
         @if length($item) > 1 {
            @if $i == 1 {
               $item: unquote("(#{nth($item,2)})[#{nth($item,1)}]");
            } @else {
               $item: unquote("repeat(#{nth($item,1)}, #{nth($item,2)})");
            }
         }
         $array: append($array, $item, space);
      }
      @if $i == 1 {
         -ms-grid-rows: $array;
      } @else {
         grid-template-rows: $array;
      }
   }
}


// 3. Grid Column Span

@mixin grid-column-span($arg) {
   -ms-grid-column-span: $arg;
   grid-column-end: span #{$arg};
}


// 4. Grid Row Span

@mixin grid-row-span($arg) {
   -ms-grid-row-span: $arg;
   grid-row-end: span #{$arg};
}


// 5. Grid Justify Self

@mixin grid-justify-self($arg) {
   -ms-grid-row-align: $arg;
   justify-self: $arg;
}


// 5. Grid Align Self

@mixin grid-align-self($arg) {
   -ms-grid-column-align: $arg;
   align-self: $arg;
}


// 7. Grid Column Start

@mixin grid-column-start($arg) {
   -ms-grid-column: $arg;
   grid-column-start: $arg;
}


// 8. Grid Row Start

@mixin grid-row-start($arg) {
   -ms-grid-row: $arg;
   grid-row-start: $arg;
}



// Flexbox:

// 1. Flex Direction

@mixin flex-direction($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      $origin: if($arg == row or $arg == row-reverse, horizontal, vertical);
      $dir: if($arg == row or $arg == column, normal, reverse);
      @if nth($support,2) < 11 {
         -ms-flex-direction: $arg;
      }
      @if nth($support,1) < 2014 {
         -webkit-box-orient: $origin;
         -moz-box-orient: $origin;
         -webkit-box-direction: $dir;
         -moz-box-direction: $dir;
      } @else if nth($support,1) < 2015 {
         -webkit-flex-direction: $arg;
      }
   }
   flex-direction: $arg;
}


// 2. Flex Wrap

@mixin flex-wrap($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         -ms-flex-wrap: if($arg == nowrap, none, $arg);
      }
      @if nth($support,1) < 2015 {
         -webkit-flex-wrap: $arg;
      }
   }
   flex-wrap: $arg;
}


// 3. Justify Content

@mixin justify-content($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      $old: $arg;
      @if $arg == flex-start {
         $old: start;
      } @else if $arg == flex-end {
         $old: end;
      } @else if $arg == space-between {
         $old: justify;
      } @else if $arg == space-around {
         $old: distribute;
      }
      @if nth($support,2) < 11 {
         -ms-flex-pack: $old;
      }
      @if nth($support,1) < 2014 {
         -webkit-box-pack: if($old == distribute, justify, $old);
         -moz-box-pack: if($old == distribute, justify, $old);
      }
      @if nth($support,1) < 2015 {
         -webkit-justify-content: $arg;
      }
   }
   justify-content: $arg;
}


// 4. Align Content

@mixin align-content($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         @if $arg == flex-start {
            -ms-flex-line-pack: start;
         } @else if $arg == flex-end {
            -ms-flex-line-pack: end;
         } @else if $arg == space-between {
            -ms-flex-line-pack: justify;
         } @else if $arg == space-around {
            -ms-flex-line-pack: distribute;
         } @else {
            -ms-flex-line-pack: $arg;
         }
      }
      @if nth($support,1) < 2015 {
         -webkit-align-content: $arg;
      }
   }
   align-content: $arg;
}


// 5. Align Items

@mixin align-items($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      $old: $arg;
      @if $arg == flex-start {
         $old: start;
      } @else if $arg == flex-end {
         $old: end;
      }
      @if nth($support,2) < 11 {
         -ms-flex-align: $old;
      }
      @if nth($support,1) < 2014 {
         -webkit-box-align: $old;
         -moz-box-align: $old;
      }
      @if nth($support,1) < 2015 {
         -webkit-align-items: $arg;
      }
   }
   align-items: $arg;
}


// 6. Align Self

@mixin align-self($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         @if $arg == flex-start {
            -ms-flex-item-align: start;
         } @else if $arg == flex-end {
            -ms-flex-item-align: end;
         } @else {
            -ms-flex-item-align: $arg;
         }
      }
      @if nth($support,1) < 2015 {
         -webkit-align-self: $arg;
      }
   }
   align-self: $arg;
}


// 7. Order

@mixin order($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         -ms-flex-order: $arg;
      }
      @if nth($support,1) < 2014 {
         -webkit-box-ordinal-group: $arg;
         -moz-box-ordinal-group: $arg;
      }
      @if nth($support,1) < 2015 {
         -webkit-order: $arg;
      }
   }
   order: $arg;
}


// 8. Grow

@mixin flex-grow($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         -ms-flex-positive: $arg;
      }
      @if nth($support,1) < 2015 {
         -webkit-flex-grow: $arg;
      }
   }
   flex-grow: $arg;
}


// 9. Shrink

@mixin flex-shrink($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         -ms-flex-negative: $arg;
      }
      @if nth($support,1) < 2015 {
         -webkit-flex-shrink: $arg;
      }
   }
   flex-shrink: $arg;
}


// 9. Basis

@mixin flex-basis($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         -ms-flex-preferred-size: $arg;
      }
      @if nth($support,1) < 2015 {
         -webkit-flex-basis: $arg;
      }
   }
   flex-basis: $arg;
}


// 10. Flex

@mixin flex($arg) {
   @if nth($support,1) < 2015 or nth($support,2) < 11 {
      @if nth($support,2) < 11 {
         -ms-flex: $arg;
      }
      @if nth($support,1) < 2014 {
         -webkit-box-flex: $arg;
         -moz-box-flex: $arg;
      }
      @if nth($support,1) < 2015 {
         -webkit-flex: $arg;
      }
   }
   flex: $arg;
}


//  Filter

@mixin filter($arg) {
   -webkit-filter: $arg;
   filter: $arg;
}


//  Appearance

@mixin appearance($arg) {
   -moz-appearance: $arg;
   -webkit-appearance: $arg;
   appearance: $arg;
}


//  Transform

@mixin transform($arg) {
   @if nth($support,1) < 2017 or nth($support,2) < 10 {
      @if nth($support,2) < 10 {
         -ms-transform: $arg;
      }
      @if nth($support,1) < 2012 {
         -o-transform: $arg;
      }
      @if nth($support,1) < 2013 {
         -moz-transform: $arg;
      }
      @if nth($support,1) < 2017 {
         -webkit-transform: $arg;
      }
   }
   transform: $arg;
}

@mixin transform-origin($arg) {
   @if nth($support,1) < 2017 or nth($support,2) < 10 {
      @if nth($support,2) < 10 {
         -ms-transform-origin: $arg;
      }
      @if nth($support,1) < 2012 {
         -o-transform-origin: $arg;
      }
      @if nth($support,1) < 2013 {
         -moz-transform-origin: $arg;
      }
      @if nth($support,1) < 2017 {
         -webkit-transform-origin: $arg;
      }
   }
   transform-origin: $arg;
}

@mixin transform-style($arg) {
   @if nth($support,1) < 2017 or nth($support,2) < 10 {
      @if nth($support,2) < 10 {
         -ms-transform-style: $arg;
      }
      @if nth($support,1) < 2012 {
         -o-transform-style: $arg;
      }
      @if nth($support,1) < 2013 {
         -moz-transform-style: $arg;
      }
      @if nth($support,1) < 2017 {
         -webkit-transform-style: $arg;
      }
   }
   transform-style: $arg;
}


//  Transition

@mixin transition($args...) {
   @if nth($support,1) < 2014 {
      @if nth($support,1) < 2012 {
         $array: ();
         @each $arg in $args {
            @if index($arg,transform) {
               $arg: set-nth($arg,1,-o-transform);
            } @else if index($arg,filter) {
               $arg: null;
            }
            $array: append($array,$arg,comma);
         }
         -o-transition: $array;
      }
      @if nth($support,1) < 2013 {
         $array: ();
         @each $arg in $args {
            @if index($arg,transform) {
               $arg: set-nth($arg,1,-moz-transform);
            } @else if index($arg,filter) {
               $arg: null;
            }
            $array: append($array,$arg,comma);
         }
         -moz-transition: $array;
      }
      $array: ();
      @each $arg in $args {
         @if index($arg,transform) {
            $arg: set-nth($arg,1,-webkit-transform);
         } @else if index($arg,filter) {
            $arg: set-nth($arg,1,-webkit-filter);
         }
         $array: append($array,$arg,comma);
      }
      -webkit-transition: $array;
   }
   transition: $args;
}



@mixin transition-delay($arg) {
   @if nth($support,1) < 2014 {
      @if nth($support,1) < 2012 {
         -o-transition-delay: $arg;
      }
      @if nth($support,1) < 2013 {
         -moz-transition-delay: $arg;
      }
      -webkit-transition-delay: $arg;
   }
   transition-delay: $arg;
}

@mixin transition-duration($arg) {
   @if nth($support,1) < 2014 {
      @if nth($support,1) < 2012 {
         -o-transition-duration: $arg;
      }
      @if nth($support,1) < 2013 {
         -moz-transition-duration: $arg;
      }
      -webkit-transition-duration: $arg;
   }
   transition-duration: $arg;
}

@mixin transition-property($arg) {
   @if nth($support,1) < 2014 {
      @if nth($support,1) < 2012 {
         -o-transition-property: if($arg == transform, -o-#{$arg}, $arg);
      }
      @if nth($support,1) < 2013 {
         -moz-transition-property: if($arg == transform, -moz-#{$arg}, $arg);
      }
      -webkit-transition-property: if($arg == transform or $arg == filter, -webkit-#{$arg}, $arg);
   }
   transition-property: $arg;
}


//  Animation

@mixin animation($args...) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-animation: $args;
      }
      -webkit-animation: $args;
   }
   animation: $args;
}

@mixin animation-delay($arg) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-animation-delay: $args;
      }
      -webkit-animation-delay: $args;
   }
   animation-delay: $args;
}

@mixin animation-play($arg) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-animation-play: $args;
      }
      -webkit-animation-play: $args;
   }
   animation-play: $args;
}

@mixin animation-direction($arg){
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-animation-direction: $args;
      }
      -webkit-animation-direction: $args;
   }
   animation-direction: $args;
}


//  Keyframes

@mixin keyframes($name) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         @-moz-keyframes #{$name} {
            @content;
         }
      }
      @-webkit-keyframes #{$name} {
         @content;
      }
   }
   @keyframes #{$name} {
      @content;
   }
}


// Perspective

@mixin perspective($arg) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-perspective: $arg;
      }
      -webkit-perspective: $arg;
   }
   perspective: $arg;
}

@mixin perspective-origin($arg) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-perspective-origin: $arg;
      }
      -webkit-perspective-origin: $arg;
   }
   perspective-origin: $arg;
}


// Text Size Adjust

@mixin text-size-adjust($arg) {
   @for $i from 2 through 5 {
      #{nth($prefix,$i)}text-size-adjust: $arg;
   }
}


// User Select

@mixin user-select($arg) {
   @for $i from 2 through 5 {
      #{nth($prefix,$i)}user-select: $arg;
   }
}


// Box Sizing

@mixin box-sizing($arg) {
   @if nth($support,1) < 2015 {
      @if nth($support,1) < 2012 {
         -webkit-box-sizing: $arg;
      }
      -moz-box-sizing: $arg;
   }
   box-sizing: $arg;
}


// Backface Visibility

@mixin backface-visibility($arg) {
   @if nth($support,1) < 2017 {
      @if nth($support,1) < 2013 {
         -moz-backface-visibility: $arg;
      }
      -webkit-backface-visibility: $arg;
   }
   backface-visibility: $arg;
}


// Tap Highlight Color

@mixin tap-highlight-color($arg) {
   -webkit-tap-highlight-color: $arg;
   tap-highlight-color: $arg;
}


// Font Smoothing
@mixin font-smoothing($arg) {
   @if $arg == antialiased {
      -moz-osx-font-smoothing: grayscale;
   } @else if $arg == none {
      -moz-osx-font-smoothing: unset;
   } @else if $arg == subpixel-antialiased {
      -moz-osx-font-smoothing: auto;
   }
   -webkit-font-smoothing: $arg;
   font-smoothing: $arg;
}


// Linear Gradient

@mixin linear-gradient($gradient, $img:null) {
   @if $img {
      $img: unquote("url(#{$img}),");
   }
   @if nth($support,1) < 2014 {
      $array: ();
      @each $item in $gradient {
         @if nth($item,1) == to {
            @if nth($item,2) == bottom {
               $item: top;
            }
            @else if nth($item,2) == top {
               $item: bottom;
            }
            @else if nth($itemt,2) == right {
               $item: left;
            }
            @else if nth($item,2) == left {
               $item: right;
            }
         } @else if type-of($item) == 'number' {
            @if unit($item) == 'deg' {
               $item: if($item < 90, ($item - 90) + 360, $item - 90);
            }
         }
         $array: append($array,$item,comma);
      }
      @if nth($support,1) < 2012 {
         background-image: #{$img} -o-linear-gradient(#{$array});
      }
      background-image: #{$img} -moz-linear-gradient(#{$array});
      background-image: #{$img} -webkit-linear-gradient(#{$array});
   }
   background-image: #{$img} linear-gradient(#{$gradient});
}


// Box Shadow

@mixin box-shadow($arg) {
   @if nth($support,1) < 2012 {
      -webkit-box-shadow: $arg;
   }
   box-shadow: $arg;
}


// Pseudo Classes

// 1. Any

@mixin any($args...) {
   @for $i from 3 through 5 {
      $array: ();
      @for $j from 1 through (length($args) - 1) {
         $add: unquote(":#{nth($prefix,$i)}any(#{nth($args,$j)})");
         $array: append($array, $add, space);
      }
      #{$array} #{nth($arg,length($args))} {
         @content;
      }
   }
}


// 2. Fullscreen

@mixin fullscreen($arg: unquote("$arg")) {
   @if nth($support,1) < 2016 {
      #{$arg}:-moz-full-screen {
         @content;
      }
   }
   #{$arg}:-ms-fullscreen {
      @content;
   }
   #{$arg}:-webkit-full-screen {
      @content;
   }
   #{$arg}:fullscreen {
      @content;
   }
}


// 3. Read-Only

@mixin read-only($arg: unquote("$arg")) {
   #{$arg}:-moz-read-only {
      @content;
   }
   #{$arg}:read-only {
      @content;
   }
}


// 4. Read-Write

@mixin read-write($arg: unquote("$arg")) {
   #{$arg}:-moz-read-write {
      @content;
   }
   #{$arg}:read-write {
      @content;
   }
}


// 5. Backdrop

@mixin backdrop($arg: unquote("$arg")) {
   @if nth($support,1) < 2015  {
      #{$arg}::-webkit-backdrop {
         @content;
      }
   }
   #{$arg}::-ms-backdrop {
      @content;
   }
   #{$arg}::backdrop {
      @content;
   }
}


// Pseudo Elements

// 1. Selection

@mixin selection($arg: unquote("$arg")) {
   #{$arg}::-moz-selection {
      @content;
   }
   #{$arg}::selection {
      @content;
   }
}


// 2.  Placeholder

@mixin placeholder($arg: unquote("$arg")) {
   #{$arg}:-moz-placeholder {
      @content;
   }
   #{$arg}:-ms-input-placeholder {
      @content;
   }
   #{$arg}::-moz-placeholder {
      @content;
   }
   #{$arg}::-webkit-input-placeholder {
      @content;
   }
   #{$arg}::placeholder {
      @content;
   }
}


// 3. Progressbar

@mixin progress-bar($arg: unquote("$arg")) {
   @for $i from 3 through 5 {
      #{$arg}::#{nth($prefix,$i)}progress-bar {
         @content;
      }
   }
}


// 4. Range/Slider Thumb

@mixin slider-thumb($arg: unquote("$arg")) {
   #{$arg}::-ms-thumb {
      @content;
   }
   #{$arg}::-moz-range-thumb {
      @content;
   }
   #{$arg}::-webkit-slider-thumb {
      @content;
   }
}


// 5. Range/Slider Track

@mixin slider-runnable-track($arg: unquote("$arg")) {
   #{$arg}::-ms-track {
      @content;
   }
   #{$arg}::-moz-range-track {
      @content;
   }
   #{$arg}::-webkit-slider-runnable-track {
      @content;
   }
}



// --- ii. Template Mixins --- //

//  Media Queries:

// 1. Max Screen Width

@mixin maxwidth($arg) {
   @media only screen and (max-width: #{$arg}) {
      @content;
   }
}


// 2. Min Screen Width

@mixin minwidth($arg) {
   @media only screen and (max-width: #{$arg}) {
      @content;
   }
}


// 3. Min and Max Screen Width

@mixin between($min, $max) {
   @media only screen and (min-width: #{$min}) and (max-width: #{$max}) {
      @content;
   }
}


// Width and Height Shorthand

@mixin size($arg) {
   width: nth($arg,1);
   height: if(length($arg) > 1, nth($arg,2), nth($arg,1));
}


// Transform with Origin

@mixin change($what, $xy) {
   @include transform($what);
   @include transform-origin($xy);
}


// Transform with Origin and Transition

@mixin animate($what, $args, $where:null) {
   @include transform($what);
   @if $where {
      @include transform-origin($where);
   }
   @include transition($args);
}


// Perspective and Origin

@mixin view($depth, $xy) {
   @include perspective($depth);
   @include perspective-origin($xy);
}


// Positioning Shorthand

// 1. Just like margin shorthand

@mixin where($arg) {
   top: nth($arg,1);
   @if length($arg) > 3 {
      right: nth($arg,2);
      bottom: nth($arg,3);
      left: nth($arg,4);
   } @else if length($arg) > 2 {
      right: nth($arg,2);
      bottom: nth($arg,3);
      left: nth($arg,2);
   } @else if length($arg) > 1 {
      right: nth($arg,2);
      bottom: nth($arg,1);
      left: nth($arg,2);
   } @else {
      right: nth($arg,1);
      bottom: nth($arg,1);
      left: nth($arg,1);
   }
}


// 2. Like Where(), but starts with Left, not Top

@mixin there($arg) {
   left: nth($arg,1);
   @if length($arg) > 3 {
      top: nth($arg,2);
      right: nth($arg,3);
      bottom: nth($arg,4);
   } @else if length($arg) > 2 {
      top: nth($arg,2);
      right: nth($arg,3);
      bottom: nth($arg,2);
   } @else if length($arg) > 1 {
      top: nth($arg,2);
      right: nth($arg,1);
      bottom: nth($arg,2);
   } @else {
      top: nth($arg,1);
      right: nth($arg,1);
      bottom: nth($arg,1);
   }
}


// 3. Left and Top Only

@mixin xy($arg) {
   left: nth($arg,1);
   top: if(length($arg) > 1, nth($arg,2), nth($arg,1));
}


// SVG Stroke shorthand like border

@mixin bound($arg) {
   stroke: nth($arg,2);
   stroke-width: nth($arg,1);
   @if length($arg) > 2 {
      @if nth($arg,3) == dashed {
         stroke-dasharray: 10,10;
      } @else if nth($arg,3) == dotted {
         stroke-dasharray: 0,10;
         stroke-linecap: round;
      }
   }
}


// Create Classes/IDs with name and number

@mixin numName($type, $name, $max, $min:1) {
   %group {
      @content;
   }
   @if $type == class {
      $name: "." + $name;
   } @else if $type == id {
      $name: "#" + $name;
   }
   @for $i from $min through $max {
      #{$name}-#{$i} {
         @extend %group;
      }
   }
}


// Create Classes/IDs with custom prefix

@mixin preName($type, $pre, $array...) {
   %group {
      @content;
   }
   @if $type == class {
      $pre: "." + $pre;
   } @else if $type == id {
      $pre: "#" + $pre;
   }
   @each $item in $array {
      #{$pre}-#{$item} {
         @extend %group;
      }
   }
}


// Create Classes/IDs with custom postfix

@mixin postName($type, $post, $array...) {
   %group {
      @content;
   }
   @if $type == class {
      $pre: "." + $post;
   } @else if $type == id {
      $pre: "#" + $post;
   }
   @each $item in $array {
      #{$item}-#{$post} {
         @extend %group;
      }
   }
}


// Opacity with Blend Mode

@mixin opaque($amount, $type) {
   opacity: $amount;
   mix-blend-mode: $type;
}


// Circle

@mixin circle($arg) {
   width: $arg;
   height: $arg;
   border-radius: 50%;
}


// Oval

@mixin oval($arg) {
   width: nth($arg,1);
   height: nth($arg,2);
   border-radius: 50%;
}


// Triangle

@mixin triangle($arg, $color, $rotate:null) {
   $nw: nth($arg,1)/2;
   width: 0;
   height: 0;
   border: {
      left: #{$nw} solid transparent;
      right: #{$nw} solid transparent;
      bottom: #{nth($arg,2)} solid #{$color};
   }
   @if $rotate {
      @include transform(rotate($rotate));
   }
}


// Parallelogram

@mixin parallelogram($arg, $amount) {
   @include transform(skew($amount));
   width: nth($arg,1);
   height: nth($arg,2);
}


// Heart
// Nicolas Gallagher -- nicolasgallagher.com

@mixin heart($width, $color) {
   $new: $width / 2;
   width: $width;
   height: ($width * .9);

   &::before, &::after {
      position: absolute;
      top: 0;
      width: $new;
      height: ($width * .8);
      content: '';
      background: $color;
      border-radius: #{$new} #{$new} 0 0;
   }

   &::before {
      @include transform(rotate(-45deg, 0 100%));
      left: $new;
   }

   &::after {
      @include transform(rotate(45deg, 100% 100%));
      left: 0;
   }
}


// Mantain a ratio

@mixin ratio($width, $length:$width) {
   height: auto;

   &::before {
      display: block;
      max-width: 100%;
      padding-top: ($length / $width) * 100%;
      content: '';
   }
}



// Buttons:

// 1. Basic Styling

@mixin btnStyle($color:null, $border:null, $corners:null) {
   @if $color {
      background-color: nth($color,1);
      color: nth($color,2);
   }
   @if $border {
      @if length($border) == 2 {
         border: #{nth($border,1)} solid #{nth($border,2)};
      } @else if type-of($border) == number {
         border: #{$border} solid #{nth($color,2)};
      } @else {
         border: $border
      }
   }
   @if $corners {
      border-radius: $corners
   }
}

// 2. with a Relative Width

@mixin btnRel($size, $color:null, $border:null, $corners:null) {
   display: inline-block;
   width: auto;
   height: nth($size,2);
   padding: 0 #{nth($size,1)};
   line-height: nth($size,2);
   text-decoration: none;
   @include btnStyle($color, $border, $corners);
}

// 3. with an Absolute Width

@mixin btnAbs($size, $color:null, $border:null, $corners:null) {
   display: block;
   width: nth($size,1);
   height: nth($size,2);
   line-height: nth($size,2);
   text: {
      decoration: none;
      align: center;
   }
   @include btnStyle($color, $border, $corners);
}


// Overflow X and Y Shorthand

@mixin flowage($arg) {
   @if length($arg) > 1 {
      overflow: {
         x: nth($arg,1);
         y: nth($arg,2);
      }
   } @else {
      overflow: $arg
   }
}


// Colors

@function shades($color, $num) {
   @return if($num > 0, lighten($color, abs($num)), darken($color, abs($num)));
}



// --- PRESETS (Predefined Mixins and Placeholders) --- //

// --- i. Based on Record Collection --- //

// No highlight tap on mobile

@mixin noTap {
   @include tap-highlight-color(transparent);
   @include tap-highlight-color(none);
}

%noTap {
   @include noTap;
}


// For smoother 2D transforms:

// 1. This one goes on the thing being transformed

@mixin smoothMover {
   @include backface-visibility(hidden);
}

%smoothMover {
   @include smoothMover;
}


// 2. This goes on the parent

@mixin smoothParent {
   @include transform-style(preserve-3d);
}

%smoothParent {
   @include smoothParent;
}


// 3. Translate-Z work-around

@mixin superSmooth {
   @include transform(translateZ(0));
}

%superSmooth {
   @include superSmooth;
}


// Font Antialiasing on OSX

@mixin smoothFonts {
   @include font-smoothing(antialiased);
}

%smoothFonts {
   @include smoothFonts;
}


// No Text Size Adjusting;

@mixin noTextAdjust {
   @include text-size-adjust(100%);
}

%noTextAdjust {
   @include noTextAdjust;
}


// Use Flexbox

@mixin box {
   @include display(flex);
}

%box {
   @include box;
}

@mixin inlineBox {
   @include display(inline-flex);
}

%inlineBox {
   @include inlineBox;
}


// Remove Default Appearance

@mixin noLooks {
   @include appearance(none);
}

%noLooks {
   @include noLooks;
}


// No User Select

@mixin noSelect {
   @include user-select(none);
}

%noSelect {
   @include noSelect;
}


// Widescreen ratio

@mixin widescreen {
   @include ratio(16,9);
}

%widescreen {
   @include widescreen;
}


// Standard ratio

@mixin standard {
   @include ratio(4,3);
}

%standard {
   @include standard;
}


// Golden ratio

@mixin goldenRatio {
   @include ratio(1,0.618);
}

%goldenRatio {
   @include goldenRatio;
}


// Equal ratio

@mixin equalRatio {
   @include ratio(1);
}

%goldenRatio {
   @include equalRatio;
}


// Box Sizing with Border

@mixin withAll {
   @include box-sizing(border-box);
}

%withAll {
   @include withAll;
}


// --- ii. Custom Presets --- //

// Center THIS OBJ with Absolute Positioning

@mixin ctrAbs {
   @include where(0);
   position: absolute;
   margin: auto;
}

%ctrAbs {
   @include ctrAbs;
}


// Center THIS OBJ Horizontally with Relative Positioning

@mixin ctrRel {
   position: relative;
   margin-right: auto;
   margin-left: auto;
}

%ctrRel {
   @include ctrRel;
}


// Center Objs in THIS CONTAINER with Flexbox

@mixin ctrBox {
   @include display(flex);
   @include justify-content(center);
   @include align-items(center);
}

%ctrBox {
   @include ctrBox;
}


// Box Shadows:

// 1. with Options

@mixin useShadow($arg) {
   $sdw: rgba(0,0,30,.3);
   @if $arg == xs {
      @include box-shadow(0 0 2px $sdw);
   }
   @if $arg == s {
      @include box-shadow(0 1px 3px $sdw)
   }
   @if $arg == m {
      @include box-shadow(0 2px 6px $sdw)
   }
   @if $arg == l {
      @include box-shadow(0 3px 9px $sdw)
   }
   @if $arg == xl {
      @include box-shadow(0 4px 12px $sdw)
   }
}

// 2. Extra Small

%useShadow-xs {
   @include useShadow(xs);
}

// 3. Small

%useShadow-s {
   @include useShadow(s);
}

// 4. Medium

%useShadow-m {
   @include useShadow(m);
}

// 5. Large

%useShadow-l {
   @include useShadow(l);
}

// 5. Extra Large

%useShadow-xl {
   @include useShadow(xl);
}


// Clear External Styling

// 1. No Outline and Border

@mixin noOuty {
   border: 0;
   outline: 0;
}

%noOuty {
   @include noOuty;
}


// 2. No Padding and Margin

@mixin noBuffering {
   padding: 0;
   margin: 0
}

%noBuffering {
   @include noBuffering;
}


// 3. No Padding, Margin, and Border

@mixin noSpacing {
   @include noBuffering;
   border: 0
}

%noSpacing {
   @include noSpacing;
}


// 4. No Padding, Margin, Outline, and Border

@mixin noBounding {
   @include noBuffering;
   @include noOuty;
}

%noBounding {
   @include noBounding;
}


// Typography:

// 1. Body Copy

@mixin bodyCopy {
   font-kerning: none;
   text-rendering: optimizeSpeed;
   line-height: 1.5;
   letter-spacing: 0.2pt;
   word-spacing: 0.02em;
}

%bodyCopy {
   @include bodyCopy;
}

// 2. Titles

@mixin titles {
   font-kerning: normal;
   text-rendering: optimizeLegibility;
   line-height: 1.2;
   letter-spacing: 0.1pt;
   word-spacing: 0.01em;
}

%titles {
   @include titles;
}


// Pseudo

@mixin pseudo($pos, $type:block) {
   display: $type;
   position: $pos;
   content: '';
}

%pseudoRel {
   @include pseudo(relative);
}

%pseudoAbs {
   @include pseudo(absolute);
}

%pseudoInRel {
   @include pseudo(relative, inline-block);
}

%pseudoInAbs {
   @include pseudo(absolute, inline-block);
}


// Clear Floats

@mixin clear {
   &::after {
      display: table;
      content: '';
      clear: both;
   }
}

%clear {
   @include clear;
}


// CSS Output Watch: Common/Often Used Rules for Grouped Selectors

%block {
   display: block
}

%inline {
   display: inline-block
}

%none {
   display: none
}

%relative {
   position: relative
}

%absolute {
   position: absolute
}

%fixed {
   position: fixed
}

%left {
   text-align: left
}

%center {
   text-align: center
}

%right {
   text-align: right
}


// CSS Reset

// 1. General

@mixin freshStart {

   html, body, figure, div, h1, h2, h3, h4, h5, h6, hgroup, address, p, hr, blockquote, summary, ol, ul, dl, dd, pre, table, tbody, th, tr, td, colgroup, thead, tfoot, iframe, %forForms {
      @extend %noSpacing;
   }

   nav, main, section, header, footer, article, aside, address, hgroup, img, object, svg, iframe, video, audio, map, embed, canvas, textarea, form, fieldset, input, select, button, label, meter, progress, figure, ol, ul, dl, div, pre, table, h1, h2, h3, h4, h5, h6, p {
      @extend %relative;
   }

   video, img, object, svg, iframe {
      @extend %block;
   }

   ol, ul, li {
      list-style: none
   }

   a {
      text-decoration: none;
      color: inherit
   }

   address {
      font-style: normal
   }

   span.nobr {
      white-space: nowrap
   }

}

// 2. Forms

@mixin freshForms {

   textarea, fieldset, input, button, select, legend {
      @extend %forForms;
   }

   form, fieldset, input, textarea {
      @include box-sizing(border-box);
   }

   input, select, textarea, button, progress, meter {
      @include appearance(none);
   }

   select, button, input[type=button] ,[role=button] {
      cursor: pointer
   }

   textarea {
      resize: none
   }

}




// --- SAMPLES (Maps for global interactive styling) --- //
// a working concept

@mixin sample($map) {
   @each $key, $value in $map {
      @if nth($value,1) == skip {
         $key: null;
      } @else if str-index($key, transform) or str-index($key, transition) {
         @for $i from 1 through 5 {
            #{nth($prefix,$i)}#{$key}: #{nth($value,1)};
         }
      } @else if str-index($key, animation) {
         @for $i from 3 through 5 {
            #{nth($prefix,$i)}#{$key}: #{nth($value,1)};
         }
      } @else if $key == filter or $key == box-shadow {
         @for $i from 4 through 5 {
            #{nth($prefix,$i)}#{$key}: #{nth($value,1)};
         }
      } @else {
         #{$key}: #{nth($value,1)};
      }
   }
   &:hover {
      @each $key, $value in $map {
         @if length($value) > 1 {
            @if nth($value,2) == skip {
               $key: null;
            } @else if str-index($key, transform) or str-index($key, transition) {
               @for $i from 1 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,2)};
               }
            } @else if str-index($key, animation) {
               @for $i from 3 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,2)};
               }
            } @else if $key == filter or $key == box-shadow {
               @for $i from 4 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,2)};
               }
            } @else {
               #{$key}: #{nth($value,2)};
            }
         }
      }
   }
   &:active {
      @each $key, $value in $map {
         @if length($value) > 2 {
            @if nth($value,3) == default {
               #{$key}: #{nth($value,1)};
            } @else if str-index($key, transform) or str-index($key, transition) {
               @for $i from 1 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,3)};
               }
            } @else if str-index($key, animation) {
               @for $i from 3 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,3)};
               }
            } @else if $key == filter or $key == box-shadow {
               @for $i from 4 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,3)};
               }
            } @else {
               #{$key}: #{nth($value,3)};
            }
         }
      }
   }
}
