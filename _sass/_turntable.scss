/* Turntable i12-1 by Daniel Blake -- danielblake.design */

// Create fresh stylesheets on the fly using patterns, scratching, and sampling.


// Turntable Variables

$prefix: -o-, -ms-, -moz-, -webkit-, null;


// --- RECORDS FOR SCRATCHING (Custom and Prefix Mixins) --- //

// --- i. Vendor-Prefix Mixins --- //

// Flexbox:

@mixin box($var) {
   display: -ms-#{$var}box;
   display: -webkit-#{$var};
   display: $var;
}


// 1. Flex Direction

@mixin boxDirection($var) {
   @for $i from 2 through 5 {
      @if $i != 3 {
         #{nth($prefix,$i)}flex-direction: $var
      }
   }
}


// 2. Flex Wrap

@mixin boxWrap($var) {
   @if $var == nowrap {
      -ms-flex-wrap: none;
   } @else {
      -ms-flex-wrap: $var;
   }
   -webkit-flex-wrap: $var;
   flex-wrap: $var;
}


// 3. Justify Content

@mixin boxHorizontal($var) {
   @if $var == flex-start {
      -ms-flex-pack: start;
   } @else if $var == flex-end {
      -ms-flex-pack: end;
   } @else if $var == space-between {
      -ms-flex-pack: justify;
   } @else if $var == space-around {
      -ms-flex-pack: distribute;
   } @else {
      -ms-flex-pack: $var;
   }
   -webkit-justify-content: $var;
   justify-content: $var;
}


// 4. Align Content

@mixin boxVertical($var) {
   @if $var == flex-start {
      -ms-flex-line-pack: start;
   } @else if $var == flex-end {
      -ms-flex-line-pack: end;
   } @else if $var == space-between {
      -ms-flex-line-pack: justify;
   } @else if $var == space-around {
      -ms-flex-line-pack: distribute;
   } @else {
      -ms-flex-line-pack: $var;
   }
   -webkit-align-content: $var;
   align-content: $var;
}


// 5. Align Items

@mixin boxItems($var) {
   @if $var == flex-start {
      -ms-flex-align: start;
   } @else if $var == flex-end {
      -ms-flex-align: end;
   } @else {
      -ms-flex-align: $var;
   }
   -webkit-align-items: $var;
   align-items: $var;
}


// 6. Align Self

@mixin boxSelf($var) {
   @if $var == flex-start {
      -ms-flex-item-align: start;
   } @else if $var == flex-end {
      -ms-flex-item-align: end;
   } @else {
      -ms-flex-item-align: $var;
   }
   -webkit-align-self: $var;
   align-self: $var;
}


// 7. Order

@mixin boxOrder($var) {
   -ms-flex-order: $var;
   -webkit-order: $var;
   order: $var;
}


// 8. Grow

@mixin boxGrow($var) {
   -ms-flex-positive: $var;
   -webkit-flex-grow: $var;
   flex-grow: $var;
}


// 9. Shrink

@mixin boxShrink($var) {
   -ms-flex-negative: $var;
   -webkit-flex-shrink: $var;
   flex-shrink: $var;
}


// 9. Basis

@mixin boxBasis($var) {
   -ms-flex-preferred-size: $var;
   -webkit-flex-basis: $var;
   flex-basis: $var;
}


//  Filter

@mixin mix($vars){
   -webkit-filter: $vars;
   filter: $vars;
}


//  Appearance

@mixin looks($var){
   @for $i from 3 through 5 {
      #{nth($prefix,$i)}appearance: $var;
   }
}


//  Transform

@mixin change($what, $xy:null) {
   @each $item in $prefix {
      #{$item}transform: $what;
   }
   @if $xy {
      @each $item in $prefix {
         #{$item}transform-origin: $xy;
      }
   }
}

@mixin changeOrigin($var) {
   @each $item in $prefix {
      #{$item}transform-origin: $var;
   }
}

@mixin changeStyle($var){
   @each $item in $prefix {
      #{$item}transform-style: $var;
   }
}


//  Transition

@mixin time($vars...) {
   @each $item in $prefix {
      $list: ();
      @each $var in $vars {
         @if index($var,transform) {
            $var: set-nth($var,1,#{$item}transform);
         }
         @if index($var,filter) {
            $var: set-nth($var,1,#{$item}filter);
         }
         $list: append($list,$var,comma);
      }
      #{$item}transition: $list;
   }
}

@mixin timeDelay($var) {
   @each $item in $prefix {
      #{$item}transition-delay: $var;
   }
}

@mixin timeDuration($var) {
   @each $item in $prefix {
      #{$item}transition-duration: $var;
   }
}

@mixin timeProperty($var) {
   @each $item in $prefix {
      @if $var == transform or $var == filter {
         #{$item}transition-property: #{$item}#{$var};
      } @else {
         #{$item}transition-property: $var;
      }
   }
}


//  Animation

@mixin animate($vars...){
   @for $i from 3 through 5 {
      #{nth($prefix,$i)}animation: $vars;
   }
}

@mixin animateDelay($var){
   @for $i from 3 through 5 {
      #{nth($prefix,$i)}animation-delay: $vars;
   }
}

@mixin animatePlay($var){
   @for $i from 3 through 5 {
      #{nth($prefix,$i)}animation-play-state: $vars;
   }
}

@mixin animateDirect($var){
   @for $i from 3 through 5 {
      #{nth($prefix,$i)}animation-direction: $vars;
   }
}



//  Keyframes

@mixin frames($name) {
   @-moz-keyframes #{$name} {
      @content;
   }
   @-webkit-keyframes #{$name} {
      @content;
   }
   @keyframes #{$name} {
      @content;
   }
}


// Perspective

@mixin view($depth, $xy:null) {
   -webkit-perspective: $depth;
   perspective: $depth;
   @if $xy {
      -webkit-perspective-origin: $var;
      perspective-origin: $var;
   }
}

@mixin viewOrigin($var) {
   -webkit-perspective-origin: $var;
   perspective-origin: $var;
}


// Text Size Adjust

@mixin textAdjust($var) {
   @for $i from 2 through 5 {
      #{nth($prefix,$i)}text-size-adjust: $var;
   }
}


// User Select

@mixin select($var) {
   @for $i from 2 through 5 {
      #{nth($prefix,$i)}user-select: $var;
   }
}


// Box Sizing

@mixin actualSize($arg) {
   -moz-box-sizing: $arg;
   box-sizing: $arg
}


// Backface Visibility

@mixin otherSide($arg) {
   @for $i from 3 through 5 {
      #{nth($prefix,$i)}backface-visibility: $arg;
   }
}


// Tap Highlight Color

@mixin tapColor($arg) {
   -webkit-tap-highlight-color: $arg;
   tap-highlight-color: $arg;
}


// Font Smoothing
@mixin textSmooth($arg) {
   @if $arg == antialiased {
      -moz-osx-font-smoothing: grayscale;
   }
   -webkit-font-smoothing: $arg;
   font-smoothing: $arg;
}


// Linear Gradient

@mixin blend($var...) {
   @for $i from 1 through 5 {
      @if $i != 2 {
         #{nth($prefix,$i)}linear-gradient: $var
      }
   }
}


// Box Shadow

@mixin shadow($var) {
   -webkit-box-shadow: $var;
   box-shadow: $var;
}



// --- ii. Template Mixins --- //

//  Media Queries:

// 1. Max Screen Width

@mixin maxwidth($var) {
   @media only screen and (max-width: $var) {
      @content;
   }
}


// 2. Min Screen Width

@mixin minwidth($var) {
   @media only screen and (max-width: $var) {
      @content;
   }
}


// 3. Min and Max Screen Width

@mixin between($min, $max) {
   @media only screen and (min-width: $min) and (max-width: $max) {
      @content;
   }
}


// Width and Height Shorthand

@mixin size($vars) {
   width: nth($vars,1);
   @if length($vars) > 1 {
      height: nth($vars,2);
   }
   @else {
      height: nth($vars,1);
   }
}


// Positioning Shorthand

// 1. Just like margin shorthand

@mixin where($vars) {
   top: nth($vars,1);
   @if length($vars) > 3 {
      right: nth($vars,2);
      bottom: nth($vars,3);
      left: nth($vars,4);
   } @else if length($vars) > 2 {
      right: nth($vars,2);
      bottom: nth($vars,3);
      left: nth($vars,2);
   } @else if length($vars) > 1 {
      right: nth($vars,2);
      bottom: nth($vars,1);
      left: nth($vars,2);
   } @else {
      right: nth($vars,1);
      bottom: nth($vars,1);
      left: nth($vars,1);
   }
}

// 2. Like Where(), but starts with Left, not Top

@mixin there($vars) {
   left: nth($vars,1);
   @if length($vars) > 3 {
      top: nth($vars,2);
      right: nth($vars,3);
      bottom: nth($vars,4);
   } @else if length($vars) > 2 {
      top: nth($vars,2);
      right: nth($vars,3);
      bottom: nth($vars,2);
   } @else if length($vars) > 1 {
      top: nth($vars,2);
      right: nth($vars,1);
      bottom: nth($vars,2);
   } @else {
      top: nth($vars,1);
      right: nth($vars,1);
      bottom: nth($vars,1);
   }
}

// 3. Left and Top Only

@mixin xy($vars) {
   left: nth($vars,1);
   @if length($vars) > 1 {
      top: nth($vars,2);
   } @else {
      top: nth($vars,1);
   }
}


// SVG Stroke shorthand like border

@mixin bound($vars) {
   stroke: nth($vars,2);
   stroke-width: nth($vars,1);
   @if length($vars) > 2 {
      @if nth($vars,3) == dashed {
         stroke-dasharray: 10,10
      } @else if nth($vars,3) == dotted {
         stroke-dasharray: 0,10;
         stroke-linecap: round;
      }
   }
}


// Create Classes/IDs with name and number

@mixin numSelector($name, $a, $b) {
   @for $i from $a through $b {
      #{$name}-#{$i} {
         @content;
      }
   }
}


// Create Classes/IDs with custom prefix

@mixin preName($pre, $list...) {
   @each $item in $list {
      #{$pre}-#{$item} {
         @content;
      }
   }
}


// Create Classes/IDs with custom postfix

@mixin postName($post, $list...) {
   @each $item in $list {
      #{$item}-#{$post} {
         @content;
      }
   }
}


// Opacity with Blend Mode

@mixin opaque($amt, $type) {
   opacity: $amt;
   mix-blend-mode: $type;
}


// Circle

@mixin circle($var) {
   width: $var;
   height: $var;
   border-radius: 50%;
}


// Oval

@mixin oval($vars) {
   width: nth($vars,1);
   height: nth($vars,2);
   border-radius: 50%;
}


// Triangle

@mixin triangle($vars, $c, $r:null) {
   $nw: nth($vars,1)/2;
   width: 0;
   height: 0;
   border: {
      left: $nw solid transparent;
      right: $nw solid transparent;
      bottom: nth($vars,2) solid $c;
   }
   @if $r {
      @include change(rotate($r));
   }
}


// Parallelogram

@mixin parallelogram($vars, $s) {
   @include change(skew($s));
   width: nth($vars,1);
   height: nth($vars,2);
}


// Heart
// Nicolas Gallagher -- nicolasgallagher.com

@mixin heart($w, $c) {
   $nw: $w / 2;
   width: $w;
   height: $w * .9;

   &::before, &::after {
      position: absolute;
      top: 0;
      width: $nw;
      height: $w * .8;
      content: '';
      background: $c;
      border-radius: $nw $nw 0 0;
   }

   &::before {
      @include change(rotate(-45deg, 0 100%));
      left: $nw;
   }

   &::after {
      @include change(rotate(45deg, 100% 100%));
      left: 0;
   }
}


// Mantain a ratio

@mixin ratio($w, $l:$w) {
   height: auto;

   &::before {
      display: block;
      max-width: 100%;
      padding-top: ($l / $w) * 100%;
      content: '';
   }
}



// Buttons:

// 1. Basic Styling

@mixin btnStyle($color:null, $border:null, $corners:null) {
   @if $color {
      background-color: nth($color,1);
      color: nth($color,2);
   }
   @if $border {
      @if length($border) == 2 {
         border: #{nth($border,1)} solid #{nth($border,2)};
      } @else if type-of($border) == number {
         border: #{$border} solid #{nth($color,2)};
      } @else {
         border: $border
      }
   }
   @if $corners {
      border-radius: $corners
   }
}

// 2. with a Relative Width

@mixin btnRel($size, $color:null, $border:null, $corners:null) {
   display: inline-block;
   width: auto;
   height: nth($size,2);
   padding: 0 nth($size,1);
   line-height: nth($size,2);
   text-decoration: none;
   @include btnStyle($color, $border, $corners);
}

// 3. with an Absolute Width

@mixin btnAbs($size, $color:null, $border:null, $corners:null) {
   display: block;
   width: nth($size,1);
   height: nth($size,2);
   line-height: nth($size,2);
   text: {
      decoration: none;
      align: center;
   }
   @include btnStyle($color, $border, $corners);
}


// Overflow X and Y Shorthand

@mixin flowage($var) {
   @if length($var) > 1 {
      overflow: {
         x: nth($var,1);
         y: nth($var,2);
      }
   } @else {
      overflow: $var
   }
}




// --- PRESETS (Predefined Mixins and Placeholders) --- //

// --- i. Based on Record Collection --- //

// No highlight tap on mobile

@mixin noTap {
   @include tapColor(transparent);
   @include tapColor(none);
}

%noTap {
   @include noTap;
}


// For smoother 2D transforms:

// 1. This one goes on the thing being transformed

@mixin smoothMover {
   @include otherSide(hidden);
}

%smoothMover {
   @include smoothMover;
}


// 2. This goes on the parent

@mixin smoothParent {
   @include changeStyle(preserve-3d);
}

%smoothParent {
   @include smoothParent;
}


// Font Antialiasing on OSX

@mixin smoothFonts {
   @include textSmooth(antialiased);
}

%smoothFonts {
   @include smoothFonts;
}


// No Text Size Adjusting;

@mixin noTextAdjust {
   @include textAdjust(100%);
}

%noTextAdjust {
   @include noTextAdjust;
}


// Use Flexbox

@mixin flex {
   @include box(flex);
}

%flex {
   @include flex;
}

@mixin inlineFlex {
   @include box(inline-flex);
}

%inlineFlex {
   @include inlineFlex;
}


// Remove Default Appearance

@mixin noDefault {
   @include looks(none);
}

%noDefault {
   @include noDefault;
}


// No User Select

@mixin noSelect {
   @include select(none);
}

%noSelect {
   @include noSelect;
}


// Widescreen ratio

@mixin widescreen {
   @include ratio(16,9);
}

%widescreen {
   @include widescreen;
}


// Standard ratio

@mixin standard {
   @include ratio(4,3);
}

%standard {
   @include standard;
}


// Golden ratio

@mixin goldenRatio {
   @include ratio(1,0.618);
}

%goldenRatio {
   @include goldenRatio;
}


// Box Sizing with Border

@mixin withAll {
   @include actualSize(border-box);
}

%withAll {
   @include withAll;
}


// --- ii. Custom Presets --- //

// Center THIS OBJ with Absolute Positioning

@mixin ctrAbs {
   @include where(0);
   position: absolute;
   margin: auto;
}

%ctrAbs {
   @include ctrAbs;
}


// Center THIS OBJ Horizontally with Relative Positioning

@mixin ctrRel {
   position: relative;
   margin-right: auto;
   margin-left: auto;
}

%ctrRel {
   @include ctrRel;
}


// Center Objs in THIS CONTAINER with Flexbox

@mixin ctrBox {
   @include box(flex);
   @include boxHorizontal(center);
   @include boxVertical(center);
}

%ctrBox {
   @include ctrBox;
}


// Box Shadows:

// 1. Extra Small

@mixin useShadow($var) {
   $sdw: rgba(0,0,30,.3);
   @if $var == xs {
      @include shadow(0 0 2px $sdw);
   } @else if $var == s {
      @include shadow(0 1px 3px $sdw)
   } @else if $var == m {
      @include shadow(0 2px 6px $sdw)
   } @else if $var == l {
      @include shadow(0 3px 9px $sdw)
   }
}

%useShadow-xs {
   @include useShadow(xs);
}


// 2. Small

%useShadow-s {
   @include useShadow(s);
}


// 3. Medium

%useShadow-m {
   @include useShadow(m);
}

// 4. Large

%useShadow-l {
   @include useShadow(l);
}


// No Outline and Border

@mixin noOuty {
   border: 0;
   outline: 0;
}

%noOuty {
   @include noOuty;
}


// Typography:

// 1. Body Copy

@mixin bodyCopy {
   font: {
      weight: normal;
      style: normal;
      stretch: normal;
   }
   text: {
      transform: none;
      rendering: optimizeSpeed;
   }
   line-height: 1.5;
   letter-spacing: .2pt;
   word-spacing: .02em;
}

%bodyCopy {
   @include bodyCopy;
}

// 2. Titles

@mixin titles {
   font: {
      style: normal;
      kerning: normal;
      stretch: normal;
   }
   text: {
      transform: none;
      rendering: optimizeLegibility;
   }
   line-height: 1.2;
   letter-spacing: .1pt;
   word-spacing: .01em;
}

%titles {
   @include titles;
}


// Buttons

// Button Hover

@mixin useBtnHover($vars) {
   &:hover {
      @if index($vars,shadow) {
         @include useShadow(s);
      }
      @if index($vars,scale) {
         @include change(scale(1.02));
      }
      @if index($vars,opacity) {
         opacity: .9;
      }
   }
}

@mixin useBtnActive($vars) {
   &:active {
      @if index($vars,shadow) {
         @include useShadow(xs);
      }
      @if index($vars,scale) {
         @include change(scale(.96));
      }
      @if index($vars,opacity) {
         opacity: .8;
      }
   }
}


// Pseudo

@mixin pseudoRel {
   display: block;
   content: '';
   position: relative;
}

%pseudoRel {
   @include pseudoRel;
}

@mixin pseudoAbs {
   display: block;
   content: '';
   position: absolute;
}

%pseudoAbs {
   @include pseudoAbs;
}


// Clear Floats

@mixin clear {
   &::after {
      display: table;
      content: '';
      clear: both;
   }
}

%clear {
   @include clear;
}




// --- SAMPLES (Maps for global interactive styling) --- //
// a working concept

@mixin sample($map) {
   @each $key, $value in $map {
      @if nth($value,1) == -n {
         $key: null;
      } @else if str-index($key, transform) or str-index($key, transition) {
         @for $i from 1 through 5 {
            #{nth($prefix,$i)}#{$key}: #{nth($value,1)};
         }
      } @else if str-index($key, animation) {
         @for $i from 3 through 5 {
            #{nth($prefix,$i)}#{$key}: #{nth($value,1)};
         }
      } @else if $key == filter or $key == box-shadow {
         @for $i from 4 through 5 {
            #{nth($prefix,$i)}#{$key}: #{nth($value,1)};
         }
      } @else {
         #{$key}: #{nth($value,1)};
      }
   }
   &:hover {
      @each $key, $value in $map {
         @if length($value) > 1 {
            @if nth($value,2) == -n {
               $key: null;
            } @else if str-index($key, transform) or str-index($key, transition) {
               @for $i from 1 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,2)};
               }
            } @else if str-index($key, animation) {
               @for $i from 3 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,2)};
               }
            } @else if $key == filter or $key == box-shadow {
               @for $i from 4 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,2)};
               }
            } @else {
               #{$key}: #{nth($value,2)};
            }
         }
      }
   }
   &:active {
      @each $key, $value in $map {
         @if length($value) > 2 {
            @if nth($value,3) == -d {
               #{$key}: #{nth($value,1)};
            } @else if str-index($key, transform) or str-index($key, transition) {
               @for $i from 1 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,3)};
               }
            } @else if str-index($key, animation) {
               @for $i from 3 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,3)};
               }
            } @else if $key == filter or $key == box-shadow {
               @for $i from 4 through 5 {
                  #{nth($prefix,$i)}#{$key}: #{nth($value,3)};
               }
            } @else {
               #{$key}: #{nth($value,3)};
            }
         }
      }
   }
}
